var search_data = {"index":{"searchIndex":["coinbaseprime","addresses","assets","balances","client","generators","initializegenerator","orders","paymentmethods","products","transactions","util","wallets","helpers","object","build_query_params()","cancel()","create()","create()","create()","create_initializer_file()","create_wallet_transfer()","create_wallet_withdrawal()","delete()","deposit_instructions()","fetch()","fetch()","fetch()","fills()","format_response()","get()","headers()","http_request()","list()","list()","list()","list()","list_entity_assets()","list_transactions()","list_wallet_transactions()","new()","open_orders()","pagination_params()","portfolio()","post()","preview()","put()","read_json_data()","read_text_data()","send_request()","signature()","transaction()","wallet()","gemfile","gemfile.lock","readme"],"longSearchIndex":["coinbaseprime","coinbaseprime::addresses","coinbaseprime::assets","coinbaseprime::balances","coinbaseprime::client","coinbaseprime::generators","coinbaseprime::generators::initializegenerator","coinbaseprime::orders","coinbaseprime::paymentmethods","coinbaseprime::products","coinbaseprime::transactions","coinbaseprime::util","coinbaseprime::wallets","helpers","object","coinbaseprime::util#build_query_params()","coinbaseprime::orders#cancel()","coinbaseprime::addresses#create()","coinbaseprime::orders#create()","coinbaseprime::wallets#create()","coinbaseprime::generators::initializegenerator#create_initializer_file()","coinbaseprime::transactions#create_wallet_transfer()","coinbaseprime::transactions#create_wallet_withdrawal()","coinbaseprime::client#delete()","coinbaseprime::wallets#deposit_instructions()","coinbaseprime::orders#fetch()","coinbaseprime::paymentmethods#fetch()","coinbaseprime::wallets#fetch()","coinbaseprime::orders#fills()","coinbaseprime::util#format_response()","coinbaseprime::client#get()","coinbaseprime::client#headers()","coinbaseprime::client#http_request()","coinbaseprime::addresses#list()","coinbaseprime::orders#list()","coinbaseprime::products#list()","coinbaseprime::wallets#list()","coinbaseprime::assets#list_entity_assets()","coinbaseprime::transactions#list_transactions()","coinbaseprime::transactions#list_wallet_transactions()","coinbaseprime::client::new()","coinbaseprime::orders#open_orders()","coinbaseprime::util#pagination_params()","coinbaseprime::balances#portfolio()","coinbaseprime::client#post()","coinbaseprime::orders#preview()","coinbaseprime::client#put()","helpers#read_json_data()","helpers#read_text_data()","coinbaseprime::util#send_request()","coinbaseprime::client#signature()","coinbaseprime::transactions#transaction()","coinbaseprime::balances#wallet()","","",""],"info":[["CoinbasePrime","","CoinbasePrime.html","","<p>Coinbase Prime module\n"],["CoinbasePrime::Addresses","","CoinbasePrime/Addresses.html","","<p>Addresses API&#39;s\n"],["CoinbasePrime::Assets","","CoinbasePrime/Assets.html","","<p>Assets API&#39;s\n"],["CoinbasePrime::Balances","","CoinbasePrime/Balances.html","","<p>Balances API&#39;s\n<p>Balances API&#39;s\n"],["CoinbasePrime::Client","","CoinbasePrime/Client.html","","<p>Base class to connect to coinbase\n<p>Base class to connect to coinbase\n"],["CoinbasePrime::Generators","","CoinbasePrime/Generators.html","",""],["CoinbasePrime::Generators::InitializeGenerator","","CoinbasePrime/Generators/InitializeGenerator.html","","<p>Generator file\n"],["CoinbasePrime::Orders","","CoinbasePrime/Orders.html","","<p>Orders API&#39;s\n"],["CoinbasePrime::PaymentMethods","","CoinbasePrime/PaymentMethods.html","","<p>Payment Methods API&#39;s\n"],["CoinbasePrime::Products","","CoinbasePrime/Products.html","","<p>Products API&#39;s\n<p>Products API&#39;s\n"],["CoinbasePrime::Transactions","","CoinbasePrime/Transactions.html","","<p>Transactions API&#39;s\n"],["CoinbasePrime::Util","","CoinbasePrime/Util.html","","<p>Utility file for general methods\n<p>Utility file for helper methods\n"],["CoinbasePrime::Wallets","","CoinbasePrime/Wallets.html","","<p>Wallets API&#39;s\n"],["Helpers","","Helpers.html","",""],["Object","","Object.html","",""],["build_query_params","CoinbasePrime::Util","CoinbasePrime/Util.html#method-i-build_query_params","(params = nil)","<p>Build url query params\n"],["cancel","CoinbasePrime::Orders","CoinbasePrime/Orders.html#method-i-cancel","(order_id)","<p>Cancel an order. (Filled orders cannot be canceled.)\n<p>options\n<p><code>order_id</code> -  [String] the valid order id.\n"],["create","CoinbasePrime::Addresses","CoinbasePrime/Addresses.html#method-i-create","(params = {})","<p>Creates an entry for a portfolio&#39;s trusted addresses\n<p>options\n<p><code>address</code>            - [String] A Crypto …\n"],["create","CoinbasePrime::Orders","CoinbasePrime/Orders.html#method-i-create","(params = {})","<p>Create Order\n<p>options\n<p><code>portfolio_id</code> -       [String] Id of portfolio.\n"],["create","CoinbasePrime::Wallets","CoinbasePrime/Wallets.html#method-i-create","(wallet_details = {})","<p>Create wallet\n<p>Path Params\n<p><code>portfolio_id</code> - [String] ID of portfolio\n"],["create_initializer_file","CoinbasePrime::Generators::InitializeGenerator","CoinbasePrime/Generators/InitializeGenerator.html#method-i-create_initializer_file","()",""],["create_wallet_transfer","CoinbasePrime::Transactions","CoinbasePrime/Transactions.html#method-i-create_wallet_transfer","(wallet_id, options = {})","<p>Create a wallet transfer.\n<p>Path Params\n<p><code>portfolio_id</code> - [String] portfolioId (Required).\n"],["create_wallet_withdrawal","CoinbasePrime::Transactions","CoinbasePrime/Transactions.html#method-i-create_wallet_withdrawal","(wallet_id, options = {})","<p>Create a withdrawal.\n<p>Path Params\n<p><code>portfolio_id</code> - [String] portfolioId (Required).\n"],["delete","CoinbasePrime::Client","CoinbasePrime/Client.html#method-i-delete","(path)",""],["deposit_instructions","CoinbasePrime::Wallets","CoinbasePrime/Wallets.html#method-i-deposit_instructions","(wallet_id, _options)","<p>Retrieve a specific wallet&#39;s deposit instructions.\n<p>Path Params\n<p><code>portfolio_id</code> - [String] ID of portfolio …\n"],["fetch","CoinbasePrime::Orders","CoinbasePrime/Orders.html#method-i-fetch","(order_id)","<p>Get Order by Order ID\n<p>options\n<p><code>order_id</code> -  [String] the valid order id.\n"],["fetch","CoinbasePrime::PaymentMethods","CoinbasePrime/PaymentMethods.html#method-i-fetch","(payment_method_id)","<p>Get payment method details by id for a given entity.\n<p>Path Params\n<p><code>entity_id</code>         - [String] ID of entity …\n"],["fetch","CoinbasePrime::Wallets","CoinbasePrime/Wallets.html#method-i-fetch","(wallet_id)","<p>Get Wallet by Wallet ID\n<p>Path Params\n<p><code>portfolio_id</code> - [String] ID of portfolio\n"],["fills","CoinbasePrime::Orders","CoinbasePrime/Orders.html#method-i-fills","(order_id, params = {})","<p>options\n<p><code>order_id</code>        - [String] The order ID generated by Coinbase\n<p><code>cursor</code>          - [String] Cursor …\n"],["format_response","CoinbasePrime::Util","CoinbasePrime/Util.html#method-i-format_response","(response)",""],["get","CoinbasePrime::Client","CoinbasePrime/Client.html#method-i-get","(path)",""],["headers","CoinbasePrime::Client","CoinbasePrime/Client.html#method-i-headers","(method, path, body)",""],["http_request","CoinbasePrime::Client","CoinbasePrime/Client.html#method-i-http_request","(method, path, body: nil)",""],["list","CoinbasePrime::Addresses","CoinbasePrime/Addresses.html#method-i-list","(params = {})","<p>Gets a list of address book addresses.\n<p>options\n<p><code>currency_symbol</code> - [String]  A Currency symbol of address …\n"],["list","CoinbasePrime::Orders","CoinbasePrime/Orders.html#method-i-list","(params = {})","<p>options\n<p><code>start_date</code>        - [String] A start date for the orders to be\n\n<p>queried from(required)\n"],["list","CoinbasePrime::Products","CoinbasePrime/Products.html#method-i-list","()","<p>List tradable products for a given portfolio.\n<p>Retrieve tradable products for a given portfolio. @return …\n"],["list","CoinbasePrime::Wallets","CoinbasePrime/Wallets.html#method-i-list","(options)","<p>List all wallets associated with a given portfolio\n<p>Path Params\n<p><code>portfolio_id</code> - [String] ID of portfolio …\n"],["list_entity_assets","CoinbasePrime::Assets","CoinbasePrime/Assets.html#method-i-list_entity_assets","(_entity_id)","<p>List all assets available for a given entity.\n<p>Path Params\n<p><code>portfolio_id</code> - [String] portfolioId (Required …\n"],["list_transactions","CoinbasePrime::Transactions","CoinbasePrime/Transactions.html#method-i-list_transactions","(options = {})","<p>List transactions for a given portfolio (only transactions that affect balances are accessible).\n<p>options …\n"],["list_wallet_transactions","CoinbasePrime::Transactions","CoinbasePrime/Transactions.html#method-i-list_wallet_transactions","(wallet_id, options = {})","<p>Retrieve transactions for a given wallet (only transactions that affect balances are accessible).\n<p>Path …\n"],["new","CoinbasePrime::Client","CoinbasePrime/Client.html#method-c-new","()",""],["open_orders","CoinbasePrime::Orders","CoinbasePrime/Orders.html#method-i-open_orders","(_params = {})","<p>@params [String] ProductID e.g. BTC-USD @return [Hash] list of addresses\n"],["pagination_params","CoinbasePrime::Util","CoinbasePrime/Util.html#method-i-pagination_params","(headers = {})",""],["portfolio","CoinbasePrime::Balances","CoinbasePrime/Balances.html#method-i-portfolio","()","<p>Gets specific portfolio balances\n<p>Retrieve a balance of given portfolio. @return [Hash] a hash with status …\n"],["post","CoinbasePrime::Client","CoinbasePrime/Client.html#method-i-post","(path, body: nil)",""],["preview","CoinbasePrime::Orders","CoinbasePrime/Orders.html#method-i-preview","(params = {})","<p>options\n<p><code>portfolio_id</code> -       [String] Id of portfolio.\n<p><code>product_id</code>         - [String] A valid product id …\n"],["put","CoinbasePrime::Client","CoinbasePrime/Client.html#method-i-put","(path, body: nil)",""],["read_json_data","Helpers","Helpers.html#method-i-read_json_data","(path)",""],["read_text_data","Helpers","Helpers.html#method-i-read_text_data","(path)",""],["send_request","CoinbasePrime::Util","CoinbasePrime/Util.html#method-i-send_request","(path)",""],["signature","CoinbasePrime::Client","CoinbasePrime/Client.html#method-i-signature","(method, timestamp, request_path: '', body: nil)",""],["transaction","CoinbasePrime::Transactions","CoinbasePrime/Transactions.html#method-i-transaction","(transaction_id)","<p>Retrieve a specific transaction by its transaction ID (only transactions that affect balances are accessible). …\n"],["wallet","CoinbasePrime::Balances","CoinbasePrime/Balances.html#method-i-wallet","(wallet_id)","<p>Gets specific wallet balance\n<p>Retrieve a balance of given wallet belonging to portfolio. @params [String] …\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source &#39;rubygems.org&#39;\n<p>gemspec\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  coinbase-prime-ruby (0.1.0)\n    activesupport\n    httparty (~&gt; 0.20)</pre>\n<p>GEM\n"],["README","","README_md.html","","<p>coinbase-prime-ruby\n"]]}}